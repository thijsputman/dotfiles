#!/usr/bin/env bash

# Manually append (relevant) Windows path-entries for WSL-interop

path-add /mnt/c/WINDOWS/system32
path-add /mnt/c/WINDOWS
path-add /mnt/c/Users/Thijs/AppData/Local/Programs/Microsoft\ VS\ Code/bin
path-add /mnt/c/Users/Thijs/AppData/Local/Programs/Microsoft\ VS\ Code\ Insiders/bin
path-add /mnt/c/Users/Thijs/AppData/Local/Microsoft/WindowsApps

export PATH

newline=false

# Ensure WSL-interop is working
#
# This has now bitten me too many times: A non-functional interop subtly breaks
# my WSL setup, leading to a lot of time lost diagnosing a seemingly random
# issue... Note this relies (intentionally) on PATH being properly setup with
# (at least) Windows' "system32"-directory – see above.

WINDOWS_VERSION="$(cmd.exe /c ver 2> /dev/null | tail -n 1)"

if [[ ! $WINDOWS_VERSION =~ "Microsoft Windows" ]] ; then
  echo -en "\033[0;33mWARNING:\033[0m " >&2
  echo "WSL-interop appears to be non-functional..." >&2
  newline=true
  unset WINDOWS_VERSION
else
  export WINDOWS_VERSION
fi

# For good measure, also keep an eye on systemd (if in-use at all) – this seems
# to be another potential source of difficult to diagnose issues...

if
  [ -d /run/systemd/system ] && ! systemctl is-system-running &> /dev/null
then
  echo -en "\033[0;33mWARNING:\033[0m " >&2
  echo "Systemd reports its state as \"$(systemctl is-system-running)\"" >&2
  newline=true
fi

if $newline ; then printf "\n" ; fi
unset newline
