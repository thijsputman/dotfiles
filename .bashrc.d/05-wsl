#!/usr/bin/env bash

# Manually append (relevant) Windows path-entries for WSL-interop

path-add /mnt/c/WINDOWS/system32
path-add /mnt/c/WINDOWS
path-add /mnt/c/Users/Thijs/AppData/Local/Programs/Microsoft\ VS\ Code/bin
path-add /mnt/c/Users/Thijs/AppData/Local/Programs/Microsoft\ VS\ Code\ Insiders/bin
path-add /mnt/c/Users/Thijs/AppData/Local/Microsoft/WindowsApps

export PATH

# Ensure WSL-interop is working
#
# This has now bitten me too many times: A non-functional interop subtly breaks
# my WSL setup, leading to a lot of time lost diagnosing a seemingly random
# issue... Note this relies (intentionally) on PATH being properly setup with
# (at least) Windows' "system32"-directory â€“ see above.

WINDOWS_VERSION="$(cmd.exe /c ver 2> /dev/null | tail -n 1)"

if [[ ! $WINDOWS_VERSION =~ "Microsoft Windows" ]]; then

  # Show warning only as part of an already present header
  if [ -n "$HEADER_SHOWN" ]; then
    printf "\033[0;33mWARNING:\033[0m " >&2
    printf "WSL-interop appears to be non-functional...\n" >&2
    printf "\n" >&2
  fi

  unset WINDOWS_VERSION

fi

export WINDOWS_VERSION
