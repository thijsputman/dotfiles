#!/usr/bin/env bash

# GPG-Agent
GPG_TTY=$(tty)
export GPG_TTY

# Fallback to the WSL gateway IP (ie, Windows host's address in the Hyper-V
# virtual network) – without an explicit host, this provides the best chance of
# things working in a (as) safe (as possible) way.
if [[ -z $USBIP_HOST && -n $WSL_GATEWAY ]]; then
  USBIP_HOST="$WSL_GATEWAY"
fi

gpg-tty() {
  gpg-connect-agent updatestartuptty /bye &> /dev/null
}

yubikey-attach() {

  # YubiKey not attached

  if [[ -n $USBIP_HOST && -n $USBIP_BUSID &&
    ! $(sudo usbip port) =~ usbip://$USBIP_HOST:3240/$USBIP_BUSID ]]; then

    # YubiKey not not plugged into the host-machine

    if [[ ! $(usbip list -r "$USBIP_HOST" 2> /dev/null) =~ $USBIP_BUSID:\ Yubico\.com ]]; then

      if zenity --question \
        --text='Insert YubiKey and press "Yes" to continue...'; then
        yubikey-attach
      fi

    # Attach YubiKey

    else

      sudo usbip attach -r "$USBIP_HOST" -b "$USBIP_BUSID"

      local yubikey_serial
      yubikey_serial="$(
        gpg --card-status 2> /dev/null |
          grep -oP 'Serial number \.\.\.\.: \K\d+'
      )"

      if [[ ! $yubikey_serial =~ ^[0-9]+$ ]]; then
        zenity --error --text="No (valid) YubiKey detected!"
        return 1
      fi

      # If the serial-number of the GPG key stubs doesn't match the YubiKey's,
      # update them – this allows multiple physical YubiKeys to be used
      # interchangeably

      if [[ $yubikey_serial != "$(gpg --card-status 2> /dev/null |
        grep -m 1 -oP 'card-no: 0006 \K\d+')" ]]; then
        gpg-connect-agent "scd serialno" "learn --force" /bye > /dev/null
      fi

      # Idem for (possible) FIDO-keys – symlink them into place

      find ~/.ssh -type f -name "*ecdsa-${yubikey_serial}*" |
        while read -r file; do
          local link_name="${file##*/}"
          rm -f "$HOME/.ssh/${link_name//-$yubikey_serial/}"
          ln -rs "$file" "$HOME/.ssh/${link_name//-$yubikey_serial/}"
        done

    fi

  fi

}

yubikey-detach() {

  # YubiKey is attached

  if [[ -n $USBIP_HOST && -n $USBIP_BUSID &&
    $(sudo usbip port) =~ usbip://$USBIP_HOST:3240/$USBIP_BUSID ]]; then

    # This naively assumes the YubiKey is attached to port 00 — should at some
    # point make this smarter...
    sudo usbip detach -p 00 2> /dev/null

  fi

}

# Use GPG-Agent for SSH
# <https://wiki.archlinux.org/index.php/GnuPG#SSH_agent>

unset SSH_AGENT_PID
if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then

  SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
  export SSH_AUTH_SOCK

  gpg-tty

fi

_yubikey-git() {

  if [[ ${1,,} =~ ^(clone|commit|pull|push)$ ]]; then
    yubikey-attach
    gpg-tty
  fi

  command git "$@"
}

ssh() {
  yubikey-attach
  gpg-tty

  command ssh "$@"
}

scp() {
  yubikey-attach
  gpg-tty

  command scp "$@"
}

gpg() {
  yubikey-attach
  gpg-tty

  command gpg "$@"
}
